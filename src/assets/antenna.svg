<svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="700.000000pt" height="700.000000pt" viewBox="0 0 700.000000 700.000000" preserveAspectRatio="xMidYMid meet"><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script>
     <g xmlns="http://www.w3.org/2000/svg" transform="translate(0.000000,700.000000) scale(0.100000,-0.100000)" fill="#FFFFFF" stroke="none">
         <path d="M1093 6928 c-190 -193 -406 -502 -542 -775 -116 -233 -191 -435 -257 -693 -110 -432 -125 -971 -39 -1415 104 -537 327 -1018 676 -1456 92 -114 227 -259 242 -259 15 0 457 441 457 455 0 6 -23 36 -51 66 -315 339 -538 746 -638 1165 -12 49 -26 105 -31 124 -5 20 -19 110 -31 200 -33 262 -21 593 32 845 100 481 315 908 633 1255 22 25 52 58 66 73 l24 28 -229 229 c-127 127 -232 230 -235 230 -3 0 -38 -33 -77 -72z"/>
         <path d="M5606 6761 l-229 -229 90 -104 c179 -206 273 -343 377 -548 98 -191 137 -290 200 -505 110 -373 126 -876 40 -1255 -28 -123 -56 -225 -81 -295 -13 -38 -34 -96 -45 -128 -36 -104 -174 -369 -253 -487 -85 -126 -164 -226 -267 -340 l-69 -74 228 -228 c125 -125 233 -228 239 -228 32 0 292 311 411 491 302 458 472 929 538 1495 21 175 16 586 -8 764 -85 621 -318 1163 -711 1655 -78 98 -214 245 -225 245 -4 0 -109 -103 -235 -229z"/>
         <path d="M1966 6059 c-264 -286 -449 -671 -517 -1079 -20 -122 -23 -447 -4 -582 49 -364 181 -688 395 -973 81 -107 187 -225 203 -225 13 0 427 410 427 422 0 4 -27 38 -60 74 -168 185 -286 423 -343 689 -30 142 -30 426 1 565 56 257 143 438 314 652 43 54 78 101 78 105 0 10 -412 423 -422 423 -3 0 -36 -32 -72 -71z"/>
         <path d="M4745 5910 l-209 -209 19 -25 c11 -14 47 -58 81 -98 145 -175 238 -370 296 -624 32 -143 32 -423 0 -570 -41 -183 -98 -333 -178 -467 -47 -77 -141 -202 -183 -241 -17 -17 -31 -37 -31 -45 0 -9 94 -110 210 -226 l210 -209 36 34 c20 19 74 82 121 140 447 555 573 1296 337 1989 -58 167 -184 402 -299 555 -69 92 -173 206 -188 206 -7 0 -106 -94 -222 -210z"/>
         <path d="M3326 5514 c-255 -50 -487 -228 -600 -459 -143 -293 -121 -609 61 -883 86 -129 225 -242 373 -303 41 -17 78 -34 82 -38 5 -5 -41 -310 -91 -596 -17 -99 -41 -242 -62 -375 -11 -69 -27 -165 -35 -215 -8 -49 -21 -133 -29 -185 -9 -52 -20 -117 -25 -145 -6 -27 -35 -203 -65 -390 -114 -700 -175 -1073 -190 -1155 -8 -47 -26 -157 -40 -245 -14 -88 -30 -182 -35 -210 -5 -27 -16 -93 -24 -145 -9 -52 -18 -112 -22 -132 l-7 -38 883 0 883 0 -7 33 c-4 17 -20 113 -36 212 -29 174 -42 251 -74 440 -9 50 -27 162 -41 250 -14 88 -32 198 -40 245 -8 47 -26 157 -40 245 -25 155 -45 275 -67 400 -5 33 -17 101 -24 150 -31 192 -54 335 -73 450 -11 66 -25 149 -31 185 -5 36 -17 103 -25 150 -8 47 -26 157 -40 245 -14 88 -32 198 -40 245 -42 237 -97 582 -93 585 2 1 31 12 66 25 186 68 360 227 454 415 161 320 113 694 -124 967 -196 224 -521 332 -822 272z"/>
     </g>
 </a0:svg>